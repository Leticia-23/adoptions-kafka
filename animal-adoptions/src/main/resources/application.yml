server:
  port: 8087

topic-in-0: complete-institutions-info

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    service-url:
      default-zone: http://${eureka-server}:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    # This above is to have different names in case there are more than one instance

spring:
  application.name: animal-adoptions

  cloud:

    function.definition: process;

    stream:

      bindings:
        process-in-0:
          destination: ${topic-in-0}
          consumer:
            concurrency: 1
            useNativeDecoding: true

      kafka:
        binder:
          # Docker
          brokers: ${kafka:localhost}:29092
          # Local
          # brokers: ${kafka:localhost}:9092

      kafka.streams:
        bindings:
          process-in-0:
            consumer:
              keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              applicationId: ${spring.application.name}

        binder:
          configuration:
            commit.interval.ms: 100
            session.timeout.ms: 10000
            schema.registry.url: http://${schema-registry:localhost}:8081
            auto.register.schemas: true
            default.key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde

  datasource:
    url: jdbc:postgresql://${adoptions_db:localhost}:5432/adoptionsDB
    username: postgres
    password: admin123
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true